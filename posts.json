{
  "posts": [
    {
      "title": "Convex Polygon",
      "number": 469,
      "level": "Medium",
      "description": "Given a list of points that form a polygon when joined sequentially, find if this polygon is convex (Convex polygon definition)",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Unique Substrings in Wraparound String",
      "number": 467,
      "level": "Medium",
      "description": "Consider the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this: \"",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Count The Repetitions",
      "number": 466,
      "level": "Hard",
      "description": "Define S = [s,n] as the string S which consists of n connected strings s",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Optimal Account Balancing",
      "number": 465,
      "level": "Hard",
      "description": "A group of friends went on holiday and sometimes lent each other money",
      "tags": []
    },
    {
      "title": "Can I Win",
      "number": 464,
      "level": "Medium",
      "description": "In the \"100 game,\" two players take turns adding, to a running total, any integer from 1",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Island Perimeter",
      "number": 463,
      "level": "Easy",
      "description": "You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Minimum Moves to Equal Array Elements II",
      "number": 462,
      "level": "Medium",
      "description": "Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Repeated Substring Pattern",
      "number": 459,
      "level": "Easy",
      "description": "Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together",
      "tags": [
        "String"
      ]
    },
    {
      "title": "132 Pattern",
      "number": 456,
      "level": "Medium",
      "description": "Given a sequence of n integers a1, a2, ",
      "tags": [
        "Stack"
      ]
    },
    {
      "title": "Assign Cookies",
      "number": 455,
      "level": "Easy",
      "description": "Assume you are an awesome parent and want to give your children some cookies",
      "tags": [
        "Greedy"
      ]
    },
    {
      "title": "4Sum II",
      "number": 454,
      "level": "Medium",
      "description": "Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero",
      "tags": [
        "Binary Search",
        "Hash Table"
      ]
    },
    {
      "title": "Minimum Moves to Equal Array Elements",
      "number": 453,
      "level": "Easy",
      "description": "Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Minimum Number of Arrows to Burst Balloons",
      "number": 452,
      "level": "Medium",
      "description": "There are a number of spherical balloons spread in two-dimensional space",
      "tags": [
        "Greedy"
      ]
    },
    {
      "title": "Number of Boomerangs",
      "number": 447,
      "level": "Easy",
      "description": "Given n points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points (i, j, k) such that the distance between i and j equals the distance",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Arithmetic Slices II - Subsequence",
      "number": 446,
      "level": "Hard",
      "description": "A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, these are arithmetic",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Sequence Reconstruction",
      "number": 444,
      "level": "Medium",
      "description": "Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs",
      "tags": [
        "Graph",
        "Topological Sort"
      ]
    },
    {
      "title": "Arranging Coins",
      "number": 441,
      "level": "Easy",
      "description": "You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins",
      "tags": []
    },
    {
      "title": "K-th Smallest in Lexicographical Order",
      "number": 440,
      "level": "Hard",
      "description": "Given integers n and k, find the lexicographically k-th smallest integer in the range from 1 to n",
      "tags": []
    },
    {
      "title": "Ternary Expression Parser",
      "number": 439,
      "level": "Medium",
      "description": "Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression",
      "tags": [
        "Depth-first Search",
        "Stack"
      ]
    },
    {
      "title": "Find All Anagrams in a String",
      "number": 438,
      "level": "Easy",
      "description": "Given a string s and a non-empty string p, find all the start indices of p's anagrams in s",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Path Sum III",
      "number": 437,
      "level": "Easy",
      "description": "You are given a binary tree in which each node contains an integer value",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Find Right Interval",
      "number": 436,
      "level": "Medium",
      "description": "Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the",
      "tags": [
        "Binary Search"
      ]
    },
    {
      "title": "Non-overlapping Intervals",
      "number": 435,
      "level": "Medium",
      "description": "Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping",
      "tags": [
        "Greedy"
      ]
    },
    {
      "title": "All O`one Data Structure",
      "number": 432,
      "level": "Hard",
      "description": "Implement a data structure supporting the following operations:\r\n\r\n\r\n\r\nInc(Key) - Inserts a new key  with value 1",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Word Squares",
      "number": 425,
      "level": "Hard",
      "description": "Given a set of words (without duplicates), find all word squares you can build from them",
      "tags": [
        "Backtracking",
        "Trie"
      ]
    },
    {
      "title": "Longest Repeating Character Replacement",
      "number": 424,
      "level": "Medium",
      "description": "Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times",
      "tags": []
    },
    {
      "title": "Reconstruct Original Digits from English",
      "number": 423,
      "level": "Medium",
      "description": "Given a non-empty string containing an out-of-order English representation of digits 0-9, output the digits in ascending order",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Valid Word Square",
      "number": 422,
      "level": "Easy",
      "description": "Given a sequence of words, check whether it forms a valid word square",
      "tags": []
    },
    {
      "title": "Maximum XOR of Two Numbers in an Array",
      "number": 421,
      "level": "Medium",
      "description": "Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai 31",
      "tags": [
        "Bit Manipulation",
        "Trie"
      ]
    },
    {
      "title": "Strong Password Checker",
      "number": 420,
      "level": "Hard",
      "description": "A password is considered strong if below conditions are all met:\r\n\r\n\r\n It has at least 6 characters and at most 20 characters",
      "tags": []
    },
    {
      "title": "Battleships in a Board",
      "number": 419,
      "level": "Medium",
      "description": "Given an 2D board, count how many different battleships are in it",
      "tags": []
    },
    {
      "title": "Sentence Screen Fitting",
      "number": 418,
      "level": "Medium",
      "description": "Given a rows x cols screen and a sentence represented by a list of words, find how many times the given sentence can be fitted on the screen",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Pacific Atlantic Water Flow",
      "number": 417,
      "level": "Medium",
      "description": "Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search"
      ]
    },
    {
      "title": "Partition Equal Subset Sum",
      "number": 416,
      "level": "Medium",
      "description": "Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. Note: Each of",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Add Strings",
      "number": 415,
      "level": "Easy",
      "description": "Given two non-negative numbers num1 and num2 represented as string, return the sum of num1 and num2",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Third Maximum Number",
      "number": 414,
      "level": "Easy",
      "description": "Given a non-empty array of integers, return the third maximum number in this array",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Arithmetic Slices",
      "number": 413,
      "level": "Medium",
      "description": "A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, these are arithmetic",
      "tags": [
        "Dynamic Programming",
        "Math"
      ]
    },
    {
      "title": "Fizz Buzz",
      "number": 412,
      "level": "Easy",
      "description": "Write a program that outputs the string representation of numbers from 1 to n",
      "tags": []
    },
    {
      "title": "Minimum Unique Word Abbreviation",
      "number": 411,
      "level": "Medium",
      "description": "A string such as \"word\" contains the following abbreviations: [\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"] Given a target string and a set",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Split Array Largest Sum",
      "number": 410,
      "level": "Medium",
      "description": "Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays",
      "tags": [
        "Binary Search"
      ]
    },
    {
      "title": "Longest Palindrome",
      "number": 409,
      "level": "Easy",
      "description": "Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Valid Word Abbreviation",
      "number": 408,
      "level": "Easy",
      "description": "Given a non-empty string s and an abbreviation abbr, return whether the string matches with the given abbreviation",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Trapping Rain Water II",
      "number": 407,
      "level": "Hard",
      "description": "Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after",
      "tags": []
    },
    {
      "title": "Queue Reconstruction by Height",
      "number": 406,
      "level": "Medium",
      "description": "Suppose you have a random list of people standing in a queue",
      "tags": []
    },
    {
      "title": "Convert a Number to Hexadecimal",
      "number": 405,
      "level": "Easy",
      "description": "Given an integer, write an algorithm to convert it to hexadecimal",
      "tags": []
    },
    {
      "title": "Sum of Left Leaves",
      "number": 404,
      "level": "Easy",
      "description": "Find the sum of all left leaves in a given binary tree",
      "tags": []
    },
    {
      "title": "Frog Jump",
      "number": 403,
      "level": "Hard",
      "description": "A frog is crossing a river",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Remove K Digits",
      "number": 402,
      "level": "Medium",
      "description": "Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible",
      "tags": [
        "Stack"
      ]
    },
    {
      "title": "Binary Watch",
      "number": 401,
      "level": "Easy",
      "description": "A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59)",
      "tags": [
        "Backtracking",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Nth Digit",
      "number": 400,
      "level": "Easy",
      "description": "Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Evaluate Division",
      "number": 399,
      "level": "Medium",
      "description": "Equations are given in the format A / B = k, where  A and B are variables represented as strings, and k is a real number (floating point number)",
      "tags": [
        "Graph"
      ]
    },
    {
      "title": "Random Pick Index",
      "number": 398,
      "level": "Medium",
      "description": "Given an array of integers with possible duplicates, randomly output the index of a given target number",
      "tags": [
        "Reservoir Sampling"
      ]
    },
    {
      "title": "Integer Replacement",
      "number": 397,
      "level": "Easy",
      "description": "Given a positive integer n and you can do operations as follow:\r\n\r\n\r\n\r\n\r\nIf n is even, replace n with n/2",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Rotate Function",
      "number": 396,
      "level": "Easy",
      "description": "Given an array of integers A and let n to be its length",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Longest Substring with At Least K Repeating Characters",
      "number": 395,
      "level": "Medium",
      "description": "Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times. Example 1: Input:",
      "tags": []
    },
    {
      "title": "Decode String",
      "number": 394,
      "level": "Medium",
      "description": "Given an encoded string, return it's decoded string",
      "tags": [
        "Depth-first Search",
        "Stack"
      ]
    },
    {
      "title": "UTF-8 Validation",
      "number": 393,
      "level": "Medium",
      "description": "A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules: For 1-byte character, the first bit is a 0, followed by its unicode code. For",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Is Subsequence",
      "number": 392,
      "level": "Medium",
      "description": "Given a string s and a string t, check if s is subsequence of t",
      "tags": [
        "Binary Search",
        "Dynamic Programming",
        "Greedy"
      ]
    },
    {
      "title": "Perfect Rectangle",
      "number": 391,
      "level": "Hard",
      "description": "Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region",
      "tags": []
    },
    {
      "title": "Elimination Game",
      "number": 390,
      "level": "Medium",
      "description": "There is a list of sorted integers from 1 to n",
      "tags": []
    },
    {
      "title": "Find the Difference",
      "number": 389,
      "level": "Easy",
      "description": "Given two strings s and t which consist of only lowercase letters",
      "tags": [
        "Hash Table",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Longest Absolute File Path",
      "number": 388,
      "level": "Medium",
      "description": "Suppose we abstract our file system by a string in the following manner:\r\n\r\nThe string \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile",
      "tags": []
    },
    {
      "title": "First Unique Character in a String",
      "number": 387,
      "level": "Easy",
      "description": "Given a string, find the first non-repeating character in it and return it's index",
      "tags": []
    },
    {
      "title": "Lexicographical Numbers",
      "number": 386,
      "level": "Medium",
      "description": "Given an integer n, return 1 - n in lexicographical order",
      "tags": []
    },
    {
      "title": "Mini Parser",
      "number": 385,
      "level": "Medium",
      "description": "Given a nested list of integers represented as a string, implement a parser to deserialize it",
      "tags": [
        "Stack",
        "String"
      ]
    },
    {
      "title": "Shuffle an Array",
      "number": 384,
      "level": "Medium",
      "description": "Shuffle a set of numbers without duplicates",
      "tags": []
    },
    {
      "title": "Ransom Note",
      "number": 383,
      "level": "Easy",
      "description": "Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Linked List Random Node",
      "number": 382,
      "level": "Medium",
      "description": "Given a singly linked list, return a random node's value from the linked list",
      "tags": [
        "Reservoir Sampling"
      ]
    },
    {
      "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
      "number": 381,
      "level": "Medium",
      "description": "Design a data structure that supports all following operations in average O(1) time",
      "tags": [
        "Array",
        "Hash Table",
        "Design"
      ]
    },
    {
      "title": "Insert Delete GetRandom O(1)",
      "number": 380,
      "level": "Medium",
      "description": "Design a data structure that supports all following operations in O(1) time",
      "tags": [
        "Array",
        "Hash Table",
        "Design"
      ]
    },
    {
      "title": "Design Phone Directory",
      "number": 379,
      "level": "Medium",
      "description": "Design a Phone Directory which supports the following operations:\r\n\r\n\r\n\r\nget: Provide a number which is not assigned to anyone",
      "tags": [
        "Linked List",
        "Design"
      ]
    },
    {
      "title": "Kth Smallest Element in a Sorted Matrix",
      "number": 378,
      "level": "Medium",
      "description": "Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix",
      "tags": [
        "Binary Search",
        "Heap"
      ]
    },
    {
      "title": "Combination Sum IV",
      "number": 377,
      "level": "Medium",
      "description": "Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Wiggle Subsequence",
      "number": 376,
      "level": "Medium",
      "description": "A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative",
      "tags": [
        "Dynamic Programming",
        "Greedy"
      ]
    },
    {
      "title": "Guess Number Higher or Lower II",
      "number": 375,
      "level": "Medium",
      "description": "We are playing the Guess Game",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Guess Number Higher or Lower",
      "number": 374,
      "level": "Easy",
      "description": "We are playing the Guess Game",
      "tags": []
    },
    {
      "title": "Find K Pairs with Smallest Sums",
      "number": 373,
      "level": "Medium",
      "description": "You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k",
      "tags": [
        "Heap"
      ]
    },
    {
      "title": "Super Pow",
      "number": 372,
      "level": "Medium",
      "description": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array",
      "tags": []
    },
    {
      "title": "Sum of Two Integers",
      "number": 371,
      "level": "Easy",
      "description": "Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Range Addition",
      "number": 370,
      "level": "Medium",
      "description": "Assume you have an array of length n initialized with all 0's and are given k update operations",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Plus One Linked List",
      "number": 369,
      "level": "Medium",
      "description": "Given a non-negative number represented as a singly linked list of digits, plus one to the number",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Largest Divisible Subset",
      "number": 368,
      "level": "Medium",
      "description": "Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0",
      "tags": [
        "Dynamic Programming",
        "Math"
      ]
    },
    {
      "title": "Valid Perfect Square",
      "number": 367,
      "level": "Medium",
      "description": "Given a positive integer num, write a function which returns True if num is a perfect square else False",
      "tags": [
        "Binary Search"
      ]
    },
    {
      "title": "Find Leaves of Binary Tree",
      "number": 366,
      "level": "Medium",
      "description": "Given a binary tree, find all leaves and then remove those leaves",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Water and Jug Problem",
      "number": 365,
      "level": "Medium",
      "description": "You are given two jugs with capacities x and y litres",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Nested List Weight Sum II",
      "number": 364,
      "level": "Medium",
      "description": "Given a nested list of integers, return the sum of all integers in the list weighted by their depth",
      "tags": [
        "Depth-first Search"
      ]
    },
    {
      "title": "Max Sum of Rectangle No Larger Than K",
      "number": 363,
      "level": "Medium",
      "description": "Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k",
      "tags": [
        "Binary Search",
        "Queue"
      ]
    },
    {
      "title": "Design Hit Counter",
      "number": 362,
      "level": "Medium",
      "description": "Design a hit counter which counts the number of hits received in the past 5 minutes",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Bomb Enemy",
      "number": 361,
      "level": "Medium",
      "description": "Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Sort Transformed Array",
      "number": 360,
      "level": "Medium",
      "description": "Given a sorted array of integers nums and integer values a, b and c",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Logger Rate Limiter",
      "number": 359,
      "level": "Easy",
      "description": "Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds. Given",
      "tags": []
    },
    {
      "title": "Rearrange String k Distance Apart",
      "number": 358,
      "level": "Hard",
      "description": "Given a non-empty string str and an integer k, rearrange the string such that the same characters are at least distance k from each other",
      "tags": [
        "Hash Table",
        "Heap",
        "Greedy"
      ]
    },
    {
      "title": "Count Numbers with Unique Digits",
      "number": 357,
      "level": "Medium",
      "description": "Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x < 10n",
      "tags": [
        "Dynamic Programming",
        "Backtracking",
        "Math"
      ]
    },
    {
      "title": "Line Reflection",
      "number": 356,
      "level": "Medium",
      "description": "Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given set of points",
      "tags": [
        "Hash Table",
        "Math"
      ]
    },
    {
      "title": "Design Twitter",
      "number": 355,
      "level": "Hard",
      "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should",
      "tags": [
        "Hash Table",
        "Heap",
        "Design"
      ]
    },
    {
      "title": "Russian Doll Envelopes",
      "number": 354,
      "level": "Hard",
      "description": "You have a number of envelopes with widths and heights given as a pair of integers (w, h)",
      "tags": [
        "Binary Search",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Design Snake Game",
      "number": 353,
      "level": "Medium",
      "description": "Design a Snake game that is played on a device with screen size = width x height",
      "tags": [
        "Design",
        "Queue"
      ]
    },
    {
      "title": "Data Stream as Disjoint Intervals",
      "number": 352,
      "level": "Hard",
      "description": "Given a data stream input of non-negative integers a1, a2, ",
      "tags": [
        "Binary Search Tree"
      ]
    },
    {
      "title": "Android Unlock Patterns",
      "number": 351,
      "level": "Medium",
      "description": "Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Intersection of Two Arrays II",
      "number": 350,
      "level": "Easy",
      "description": "Given two arrays, write a function to compute their intersection",
      "tags": [
        "Binary Search",
        "Hash Table",
        "Two Pointers",
        "Sort"
      ]
    },
    {
      "title": "Intersection of Two Arrays",
      "number": 349,
      "level": "Easy",
      "description": "Given two arrays, write a function to compute their intersection",
      "tags": [
        "Binary Search",
        "Hash Table",
        "Two Pointers",
        "Sort"
      ]
    },
    {
      "title": "Design Tic-Tac-Toe",
      "number": 348,
      "level": "Medium",
      "description": "Design a Tic-tac-toe game that is played between two players on a n x n grid",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Top K Frequent Elements",
      "number": 347,
      "level": "Medium",
      "description": "Given a non-empty array of integers, return the k most frequent elements",
      "tags": [
        "Hash Table",
        "Heap"
      ]
    },
    {
      "title": "Moving Average from Data Stream",
      "number": 346,
      "level": "Easy",
      "description": "Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window",
      "tags": [
        "Design",
        "Queue"
      ]
    },
    {
      "title": "Reverse Vowels of a String",
      "number": 345,
      "level": "Easy",
      "description": "Write a function that takes a string as input and reverse only the vowels of a string",
      "tags": [
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Reverse String",
      "number": 344,
      "level": "Easy",
      "description": "Write a function that takes a string as input and returns the string reversed",
      "tags": []
    },
    {
      "title": "Integer Break",
      "number": 343,
      "level": "Medium",
      "description": "Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Power of Four",
      "number": 342,
      "level": "Easy",
      "description": "Given an integer (signed 32 bits), write a function to check whether it is a power of 4",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Flatten Nested List Iterator",
      "number": 341,
      "level": "Medium",
      "description": "Given a nested list of integers, implement an iterator to flatten it",
      "tags": [
        "Stack",
        "Design"
      ]
    },
    {
      "title": "Longest Substring with At Most K Distinct Characters",
      "number": 340,
      "level": "Hard",
      "description": "Given a string, find the length of the longest substring T that contains at most k distinct characters",
      "tags": [
        "Hash Table",
        "String"
      ]
    },
    {
      "title": "Nested List Weight Sum",
      "number": 339,
      "level": "Easy",
      "description": "Given a nested list of integers, return the sum of all integers in the list weighted by their depth",
      "tags": [
        "Depth-first Search"
      ]
    },
    {
      "title": "Counting Bits",
      "number": 338,
      "level": "Medium",
      "description": "Given a non negative integer number num",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "House Robber III",
      "number": 337,
      "level": "Medium",
      "description": "The thief has found himself a new place for his thievery again",
      "tags": []
    },
    {
      "title": "Palindrome Pairs",
      "number": 336,
      "level": "Hard",
      "description": "Given a list of unique words",
      "tags": []
    },
    {
      "title": "Self Crossing",
      "number": 335,
      "level": "Medium",
      "description": "You are given an array x of n positive numbers",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Increasing Triplet Subsequence",
      "number": 334,
      "level": "Medium",
      "description": "Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array",
      "tags": []
    },
    {
      "title": "Largest BST Subtree",
      "number": 333,
      "level": "Medium",
      "description": "Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Reconstruct Itinerary",
      "number": 332,
      "level": "Medium",
      "description": "Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order",
      "tags": [
        "Depth-first Search",
        "Graph"
      ]
    },
    {
      "title": "Verify Preorder Serialization of a Binary Tree",
      "number": 331,
      "level": "Medium",
      "description": "One way to serialize a binary tree is to use pre-oder traversal",
      "tags": [
        "Stack"
      ]
    },
    {
      "title": "Patching Array",
      "number": 330,
      "level": "Medium",
      "description": "Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of",
      "tags": []
    },
    {
      "title": "Longest Increasing Path in a Matrix",
      "number": 329,
      "level": "Medium",
      "description": "Given an integer matrix, find the length of the longest increasing path",
      "tags": [
        "Depth-first Search",
        "Topological Sort",
        "Memoization"
      ]
    },
    {
      "title": "Odd Even Linked List",
      "number": 328,
      "level": "Easy",
      "description": "Given a singly linked list, group all odd nodes together followed by the even nodes",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Count of Range Sum",
      "number": 327,
      "level": "Hard",
      "description": "Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive",
      "tags": [
        "Divide and Conquer",
        "Binary Search Tree"
      ]
    },
    {
      "title": "Power of Three",
      "number": 326,
      "level": "Easy",
      "description": "Given an integer, write a function to determine if it is a power of three",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Maximum Size Subarray Sum Equals k",
      "number": 325,
      "level": "Easy",
      "description": "Given an array nums and a target value k, find the maximum length of a subarray that sums to k",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Wiggle Sort II",
      "number": 324,
      "level": "Medium",
      "description": "Given an unsorted array nums, reorder it such that\r\n    nums[0]  nums[2] ",
      "tags": [
        "Sort"
      ]
    },
    {
      "title": "Number of Connected Components in an Undirected Graph",
      "number": 323,
      "level": "Medium",
      "description": "Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search",
        "Graph",
        "Union Find"
      ]
    },
    {
      "title": "Coin Change",
      "number": 322,
      "level": "Medium",
      "description": "You are given coins of different denominations and a total amount of money amount",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Create Maximum Number",
      "number": 321,
      "level": "Hard",
      "description": "Given two arrays of length m and n with digits 0-9 representing two numbers",
      "tags": [
        "Dynamic Programming",
        "Greedy"
      ]
    },
    {
      "title": "Generalized Abbreviation",
      "number": 320,
      "level": "Medium",
      "description": "Write a function to generate the generalized abbreviations of a word",
      "tags": [
        "Backtracking",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Bulb Switcher",
      "number": 319,
      "level": "Medium",
      "description": "There are n bulbs that are initially off",
      "tags": [
        "Math",
        "Brainteaser"
      ]
    },
    {
      "title": "Maximum Product of Word Lengths",
      "number": 318,
      "level": "Medium",
      "description": "Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Shortest Distance from All Buildings",
      "number": 317,
      "level": "Hard",
      "description": "You want to build a house on an empty land which reaches all buildings in the shortest amount of distance",
      "tags": [
        "Breadth-first Search"
      ]
    },
    {
      "title": "Remove Duplicate Letters",
      "number": 316,
      "level": "Medium",
      "description": "Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once",
      "tags": [
        "Stack",
        "Greedy"
      ]
    },
    {
      "title": "Count of Smaller Numbers After Self",
      "number": 315,
      "level": "Hard",
      "description": "You are given an integer array nums and you have to return a new counts array",
      "tags": [
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Binary Search Tree"
      ]
    },
    {
      "title": "Binary Tree Vertical Order Traversal",
      "number": 314,
      "level": "Medium",
      "description": "Given a binary tree, return the vertical order traversal of its nodes' values",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Super Ugly Number",
      "number": 313,
      "level": "Medium",
      "description": "Write a program to find the nth super ugly number",
      "tags": [
        "Math",
        "Heap"
      ]
    },
    {
      "title": "Burst Balloons",
      "number": 312,
      "level": "Hard",
      "description": "Given n balloons, indexed from 0 to n-1",
      "tags": [
        "Divide and Conquer",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Sparse Matrix Multiplication",
      "number": 311,
      "level": "Medium",
      "description": "Given two sparse matrices A and B, return the result of AB",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Minimum Height Trees",
      "number": 310,
      "level": "Medium",
      "description": "For a undirected graph with tree characteristics, we can choose any node as the root",
      "tags": [
        "Breadth-first Search",
        "Graph"
      ]
    },
    {
      "title": "Best Time to Buy and Sell Stock with Cooldown",
      "number": 309,
      "level": "Medium",
      "description": "Say you have an array for which the ith element is the price of a given stock on day i",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Range Sum Query 2D - Mutable",
      "number": 308,
      "level": "Hard",
      "description": "Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). The above rectangle (with",
      "tags": [
        "Segment Tree",
        "Binary Indexed Tree"
      ]
    },
    {
      "title": "Range Sum Query - Mutable",
      "number": 307,
      "level": "Medium",
      "description": "Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive",
      "tags": [
        "Segment Tree",
        "Binary Indexed Tree"
      ]
    },
    {
      "title": "Additive Number",
      "number": 306,
      "level": "Medium",
      "description": "Additive number is a string whose digits can form additive sequence",
      "tags": []
    },
    {
      "title": "Number of Islands II",
      "number": 305,
      "level": "Hard",
      "description": "A 2d grid map of m rows and n columns is initially filled with water",
      "tags": [
        "Union Find"
      ]
    },
    {
      "title": "Range Sum Query 2D - Immutable",
      "number": 304,
      "level": "Medium",
      "description": "Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). The above rectangle (with",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Range Sum Query - Immutable",
      "number": 303,
      "level": "Easy",
      "description": "Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Smallest Rectangle Enclosing Black Pixels",
      "number": 302,
      "level": "Hard",
      "description": "An image is represented by a binary matrix with 0 as a white pixel and 1 as a black pixel",
      "tags": [
        "Binary Search"
      ]
    },
    {
      "title": "Remove Invalid Parentheses",
      "number": 301,
      "level": "Hard",
      "description": "Remove the minimum number of invalid parentheses in order to make the input string valid",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search"
      ]
    },
    {
      "title": "Longest Increasing Subsequence",
      "number": 300,
      "level": "Medium",
      "description": "Given an unsorted array of integers, find the length of longest increasing subsequence",
      "tags": [
        "Dynamic Programming",
        "Binary Search"
      ]
    },
    {
      "title": "Bulls and Cows",
      "number": 299,
      "level": "Easy",
      "description": "You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Binary Tree Longest Consecutive Sequence",
      "number": 298,
      "level": "Medium",
      "description": "Given a binary tree, find the length of the longest consecutive sequence path",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Serialize and Deserialize Binary Tree",
      "number": 297,
      "level": "Medium",
      "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a",
      "tags": [
        "Tree",
        "Design"
      ]
    },
    {
      "title": "Best Meeting Point",
      "number": 296,
      "level": "Hard",
      "description": "A group of two or more people wants to meet and minimize the total travel distance",
      "tags": [
        "Math",
        "Sort"
      ]
    },
    {
      "title": "Find Median from Data Stream",
      "number": 295,
      "level": "Hard",
      "description": "Median is the middle value in an ordered integer list",
      "tags": [
        "Heap",
        "Design"
      ]
    },
    {
      "title": "Flip Game II",
      "number": 294,
      "level": "Medium",
      "description": "You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Flip Game",
      "number": 293,
      "level": "Easy",
      "description": "You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Nim Game",
      "number": 292,
      "level": "Easy",
      "description": "You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones.",
      "tags": []
    },
    {
      "title": "Word Pattern II",
      "number": 291,
      "level": "Hard",
      "description": "Given a pattern and a string str, find if str follows the same pattern",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Word Pattern",
      "number": 290,
      "level": "Easy",
      "description": "Given a pattern and a string str, find if str follows the same pattern",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Game of Life",
      "number": 289,
      "level": "Medium",
      "description": "According to the Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\" Given a board with",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Unique Word Abbreviation",
      "number": 288,
      "level": "Easy",
      "description": "An abbreviation of a word follows the form <first letter><number><last letter>",
      "tags": [
        "Hash Table",
        "Design"
      ]
    },
    {
      "title": "Find the Duplicate Number",
      "number": 287,
      "level": "Hard",
      "description": "Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist",
      "tags": [
        "Array",
        "Two Pointers",
        "Binary Search"
      ]
    },
    {
      "title": "Walls and Gates",
      "number": 286,
      "level": "Medium",
      "description": "You are given a m x n 2D grid initialized with these three possible values",
      "tags": [
        "Breadth-first Search"
      ]
    },
    {
      "title": "Inorder Successor in BST",
      "number": 285,
      "level": "Medium",
      "description": "Given a binary search tree and a node in it, find the in-order successor of that node in the BST",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Peeking Iterator",
      "number": 284,
      "level": "Medium",
      "description": "Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation -- it essentially peek() at the element that will be returned by",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Move Zeroes",
      "number": 283,
      "level": "Easy",
      "description": "Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Expression Add Operators",
      "number": 282,
      "level": "Hard",
      "description": "Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to",
      "tags": [
        "Divide and Conquer"
      ]
    },
    {
      "title": "Zigzag Iterator",
      "number": 281,
      "level": "Medium",
      "description": "Given two 1d vectors, implement an iterator to return their elements alternately",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Wiggle Sort",
      "number": 280,
      "level": "Medium",
      "description": "Given an unsorted array nums, reorder it in-place such that nums[0] = nums[2] ",
      "tags": [
        "Array",
        "Sort"
      ]
    },
    {
      "title": "Perfect Squares",
      "number": 279,
      "level": "Medium",
      "description": "Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ",
      "tags": [
        "Dynamic Programming",
        "Breadth-first Search",
        "Math"
      ]
    },
    {
      "title": "First Bad Version",
      "number": 278,
      "level": "Easy",
      "description": "You are a product manager and currently leading a team to develop a new product",
      "tags": [
        "Binary Search"
      ]
    },
    {
      "title": "Find the Celebrity",
      "number": 277,
      "level": "Medium",
      "description": "Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Paint Fence",
      "number": 276,
      "level": "Easy",
      "description": "There is a fence with n posts, each post can be painted with one of the k colors",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "H-Index II",
      "number": 275,
      "level": "Medium",
      "description": "Follow up for H-Index: What if the citations array is sorted in ascending order? Could you optimize your algorithm? Expected runtime complexity is in O(log n) and the input is sorted. Show",
      "tags": [
        "Binary Search"
      ]
    },
    {
      "title": "H-Index",
      "number": 274,
      "level": "Medium",
      "description": "Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index",
      "tags": [
        "Hash Table",
        "Sort"
      ]
    },
    {
      "title": "Integer to English Words",
      "number": 273,
      "level": "Medium",
      "description": "Convert a non-negative integer to its english words representation",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Closest Binary Search Tree Value II",
      "number": 272,
      "level": "Hard",
      "description": "Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target",
      "tags": [
        "Tree",
        "Stack"
      ]
    },
    {
      "title": "Encode and Decode Strings",
      "number": 271,
      "level": "Medium",
      "description": "Design an algorithm to encode a list of strings to a string",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Closest Binary Search Tree Value",
      "number": 270,
      "level": "Easy",
      "description": "Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target",
      "tags": [
        "Tree",
        "Binary Search"
      ]
    },
    {
      "title": "Alien Dictionary",
      "number": 269,
      "level": "Hard",
      "description": "There is a new alien language which uses the latin alphabet",
      "tags": [
        "Graph",
        "Topological Sort"
      ]
    },
    {
      "title": "Missing Number",
      "number": 268,
      "level": "Medium",
      "description": "Given an array containing n distinct numbers taken from 0, 1, 2, ",
      "tags": [
        "Array",
        "Math",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Palindrome Permutation II",
      "number": 267,
      "level": "Medium",
      "description": "Given a string s, return all the palindromic permutations (without duplicates) of it",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Palindrome Permutation",
      "number": 266,
      "level": "Easy",
      "description": "Given a string, determine if a permutation of the string could form a palindrome",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Paint House II",
      "number": 265,
      "level": "Hard",
      "description": "There are a row of n houses, each house can be painted with one of the k colors",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Ugly Number II",
      "number": 264,
      "level": "Medium",
      "description": "Write a program to find the n-th ugly number",
      "tags": [
        "Dynamic Programming",
        "Heap",
        "Math"
      ]
    },
    {
      "title": "Ugly Number",
      "number": 263,
      "level": "Easy",
      "description": "Write a program to check whether a given number is an ugly number",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Graph Valid Tree",
      "number": 261,
      "level": "Medium",
      "description": "Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search",
        "Graph",
        "Union Find"
      ]
    },
    {
      "title": "Single Number III",
      "number": 260,
      "level": "Medium",
      "description": "Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "3Sum Smaller",
      "number": 259,
      "level": "Medium",
      "description": "Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 that satisfy the condition nums[i] + nums[j] + nums[k] . For",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Add Digits",
      "number": 258,
      "level": "Easy",
      "description": "Given a non-negative integer num, repeatedly add all its digits until the result has only one digit",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Binary Tree Paths",
      "number": 257,
      "level": "Easy",
      "description": "Given a binary tree, return all root-to-leaf paths",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Paint House",
      "number": 256,
      "level": "Medium",
      "description": "There are a row of n houses, each house can be painted with one of the three colors: red, blue or green",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Verify Preorder Sequence in Binary Search Tree",
      "number": 255,
      "level": "Medium",
      "description": "Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree",
      "tags": [
        "Tree",
        "Stack"
      ]
    },
    {
      "title": "Factor Combinations",
      "number": 254,
      "level": "Medium",
      "description": "Numbers can be regarded as product of its factors",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Meeting Rooms II",
      "number": 253,
      "level": "Medium",
      "description": "Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],",
      "tags": [
        "Heap",
        "Greedy",
        "Sort"
      ]
    },
    {
      "title": "Meeting Rooms",
      "number": 252,
      "level": "Easy",
      "description": "Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],",
      "tags": [
        "Sort"
      ]
    },
    {
      "title": "Flatten 2D Vector",
      "number": 251,
      "level": "Medium",
      "description": "Implement an iterator to flatten a 2d vector",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Count Univalue Subtrees",
      "number": 250,
      "level": "Medium",
      "description": "Given a binary tree, count the number of uni-value subtrees",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Group Shifted Strings",
      "number": 249,
      "level": "Easy",
      "description": "Given a string, we can \"shift\" each of its letter to its successive letter, for example: \"abc\" -> \"bcd\"",
      "tags": [
        "Hash Table",
        "String"
      ]
    },
    {
      "title": "Strobogrammatic Number III",
      "number": 248,
      "level": "Hard",
      "description": "A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down)",
      "tags": [
        "Math",
        "Recursion"
      ]
    },
    {
      "title": "Strobogrammatic Number II",
      "number": 247,
      "level": "Medium",
      "description": "A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down)",
      "tags": [
        "Math",
        "Recursion"
      ]
    },
    {
      "title": "Strobogrammatic Number",
      "number": 246,
      "level": "Easy",
      "description": "A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down)",
      "tags": [
        "Hash Table",
        "Math"
      ]
    },
    {
      "title": "Shortest Word Distance III",
      "number": 245,
      "level": "Medium",
      "description": "This is a follow up of Shortest Word Distance",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Shortest Word Distance II",
      "number": 244,
      "level": "Medium",
      "description": "This is a follow up of Shortest Word Distance",
      "tags": [
        "Hash Table",
        "Design"
      ]
    },
    {
      "title": "Shortest Word Distance",
      "number": 243,
      "level": "Easy",
      "description": "Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Valid Anagram",
      "number": 242,
      "level": "Easy",
      "description": "Given two strings s and t, write a function to determine if t is an anagram of s",
      "tags": [
        "Hash Table",
        "Sort"
      ]
    },
    {
      "title": "Different Ways to Add Parentheses",
      "number": 241,
      "level": "Medium",
      "description": "Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators",
      "tags": [
        "Divide and Conquer"
      ]
    },
    {
      "title": "Search a 2D Matrix II",
      "number": 240,
      "level": "Medium",
      "description": "Write an efficient algorithm that searches for a value in an m x n matrix",
      "tags": [
        "Divide and Conquer",
        "Binary Search"
      ]
    },
    {
      "title": "Sliding Window Maximum",
      "number": 239,
      "level": "Hard",
      "description": "Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right",
      "tags": [
        "Heap"
      ]
    },
    {
      "title": "Product of Array Except Self",
      "number": 238,
      "level": "Medium",
      "description": "Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Solve",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Delete Node in a Linked List",
      "number": 237,
      "level": "Easy",
      "description": "Write a function to delete a node (except the tail) in a singly linked list, given only access to that node",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Lowest Common Ancestor of a Binary Tree",
      "number": 236,
      "level": "Medium",
      "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Lowest Common Ancestor of a Binary Search Tree",
      "number": 235,
      "level": "Easy",
      "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Palindrome Linked List",
      "number": 234,
      "level": "Easy",
      "description": "Given a singly linked list, determine if it is a palindrome",
      "tags": [
        "Linked List",
        "Two Pointers"
      ]
    },
    {
      "title": "Number of Digit One",
      "number": 233,
      "level": "Medium",
      "description": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Implement Queue using Stacks",
      "number": 232,
      "level": "Easy",
      "description": "Implement the following operations of a queue using stacks",
      "tags": [
        "Stack",
        "Design"
      ]
    },
    {
      "title": "Power of Two",
      "number": 231,
      "level": "Easy",
      "description": "Given an integer, write a function to determine if it is a power of two",
      "tags": [
        "Math",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Kth Smallest Element in a BST",
      "number": 230,
      "level": "Medium",
      "description": "Given a binary search tree, write a function kthSmallest to find the kth smallest element in it",
      "tags": [
        "Tree",
        "Binary Search"
      ]
    },
    {
      "title": "Majority Element II",
      "number": 229,
      "level": "Medium",
      "description": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Summary Ranges",
      "number": 228,
      "level": "Easy",
      "description": "Given a sorted integer array without duplicates, return the summary of its ranges",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Basic Calculator II",
      "number": 227,
      "level": "Medium",
      "description": "Implement a basic calculator to evaluate a simple expression string",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Invert Binary Tree",
      "number": 226,
      "level": "Easy",
      "description": "Invert a binary tree",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Implement Stack using Queues",
      "number": 225,
      "level": "Easy",
      "description": "Implement the following operations of a stack using queues",
      "tags": [
        "Stack",
        "Design"
      ]
    },
    {
      "title": "Basic Calculator",
      "number": 224,
      "level": "Medium",
      "description": "Implement a basic calculator to evaluate a simple expression string",
      "tags": [
        "Stack",
        "Math"
      ]
    },
    {
      "title": "Rectangle Area",
      "number": 223,
      "level": "Easy",
      "description": "Find the total area covered by two rectilinear rectangles in a 2D plane",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Count Complete Tree Nodes",
      "number": 222,
      "level": "Medium",
      "description": "Given a complete binary tree, count the number of nodes",
      "tags": [
        "Tree",
        "Binary Search"
      ]
    },
    {
      "title": "Maximal Square",
      "number": 221,
      "level": "Medium",
      "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Contains Duplicate III",
      "number": 220,
      "level": "Medium",
      "description": "Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and",
      "tags": [
        "Binary Search Tree"
      ]
    },
    {
      "title": "Contains Duplicate II",
      "number": 219,
      "level": "Easy",
      "description": "Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between",
      "tags": [
        "Array",
        "Hash Table"
      ]
    },
    {
      "title": "The Skyline Problem",
      "number": 218,
      "level": "Hard",
      "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance",
      "tags": [
        "Divide and Conquer",
        "Heap"
      ]
    },
    {
      "title": "Contains Duplicate",
      "number": 217,
      "level": "Easy",
      "description": "Given an array of integers, find if the array contains any duplicates",
      "tags": [
        "Array",
        "Hash Table"
      ]
    },
    {
      "title": "Combination Sum III",
      "number": 216,
      "level": "Medium",
      "description": "Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique",
      "tags": [
        "Array",
        "Backtracking"
      ]
    },
    {
      "title": "Kth Largest Element in an Array",
      "number": 215,
      "level": "Medium",
      "description": "Find the kth largest element in an unsorted array",
      "tags": [
        "Divide and Conquer",
        "Heap"
      ]
    },
    {
      "title": "Shortest Palindrome",
      "number": 214,
      "level": "Hard",
      "description": "Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it",
      "tags": [
        "String"
      ]
    },
    {
      "title": "House Robber II",
      "number": 213,
      "level": "Medium",
      "description": "Note: This is an extension of House Robber",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Word Search II",
      "number": 212,
      "level": "Hard",
      "description": "Given a 2D board and a list of words from the dictionary, find all words in the board",
      "tags": [
        "Backtracking",
        "Trie"
      ]
    },
    {
      "title": "Add and Search Word - Data structure design",
      "number": 211,
      "level": "Medium",
      "description": "Design a data structure that supports the following two operations: void addWord(word) bool search(word) search(word) can search a literal word or a regular expression string containing only letters a-z or .. A",
      "tags": [
        "Backtracking",
        "Trie",
        "Design"
      ]
    },
    {
      "title": "Course Schedule II",
      "number": 210,
      "level": "Medium",
      "description": "There are a total of n courses you have to take, labeled from 0 to n - 1",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search",
        "Graph",
        "Topological Sort"
      ]
    },
    {
      "title": "Minimum Size Subarray Sum",
      "number": 209,
      "level": "Medium",
      "description": "Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s",
      "tags": [
        "Array",
        "Two Pointers",
        "Binary Search"
      ]
    },
    {
      "title": "Implement Trie (Prefix Tree)",
      "number": 208,
      "level": "Medium",
      "description": "Implement a trie with insert, search, and startsWith methods",
      "tags": [
        "Trie",
        "Design"
      ]
    },
    {
      "title": "Course Schedule",
      "number": 207,
      "level": "Medium",
      "description": "There are a total of n courses you have to take, labeled from 0 to n - 1",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search",
        "Graph",
        "Topological Sort"
      ]
    },
    {
      "title": "Reverse Linked List",
      "number": 206,
      "level": "Easy",
      "description": "Reverse a singly linked list",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Isomorphic Strings",
      "number": 205,
      "level": "Easy",
      "description": "Given two strings s and t, determine if they are isomorphic",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Count Primes",
      "number": 204,
      "level": "Easy",
      "description": "Description:\r\nCount the number of prime numbers less than a non-negative number, n",
      "tags": [
        "Hash Table",
        "Math"
      ]
    },
    {
      "title": "Remove Linked List Elements",
      "number": 203,
      "level": "Easy",
      "description": "Remove all elements from a linked list of integers that have value val",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Happy Number",
      "number": 202,
      "level": "Easy",
      "description": "Write an algorithm to determine if a number is \"happy\"",
      "tags": [
        "Hash Table",
        "Math"
      ]
    },
    {
      "title": "Bitwise AND of Numbers Range",
      "number": 201,
      "level": "Medium",
      "description": "Given a range [m, n] where 0 \r\n\r\n\r\nFor example, given the range [5, 7], you should return 4",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Number of Islands",
      "number": 200,
      "level": "Medium",
      "description": "Given a 2d grid map of '1's (land) and '0's (water), count the number of islands",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search",
        "Union Find"
      ]
    },
    {
      "title": "Binary Tree Right Side View",
      "number": 199,
      "level": "Medium",
      "description": "Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom",
      "tags": [
        "Tree",
        "Depth-first Search",
        "Breadth-first Search"
      ]
    },
    {
      "title": "House Robber",
      "number": 198,
      "level": "Easy",
      "description": "You are a professional robber planning to rob houses along a street",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Number of 1 Bits",
      "number": 191,
      "level": "Easy",
      "description": "Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight)",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Reverse Bits",
      "number": 190,
      "level": "Easy",
      "description": "Reverse bits of a given 32 bits unsigned integer",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Rotate Array",
      "number": 189,
      "level": "Easy",
      "description": "Rotate an array of n elements to the right by k steps",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Best Time to Buy and Sell Stock IV",
      "number": 188,
      "level": "Hard",
      "description": "Say you have an array for which the ith element is the price of a given stock on day i",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Repeated DNA Sequences",
      "number": 187,
      "level": "Medium",
      "description": "All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\"",
      "tags": [
        "Hash Table",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Reverse Words in a String II",
      "number": 186,
      "level": "Medium",
      "description": "Given an input string, reverse the string word by word",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Largest Number",
      "number": 179,
      "level": "Medium",
      "description": "Given a list of non negative integers, arrange them such that they form the largest number",
      "tags": [
        "Sort"
      ]
    },
    {
      "title": "Dungeon Game",
      "number": 174,
      "level": "Hard",
      "description": "table",
      "tags": [
        "Dynamic Programming",
        "Binary Search"
      ]
    },
    {
      "title": "Binary Search Tree Iterator",
      "number": 173,
      "level": "Medium",
      "description": "Implement an iterator over a binary search tree (BST)",
      "tags": [
        "Tree",
        "Stack",
        "Design"
      ]
    },
    {
      "title": "Factorial Trailing Zeroes",
      "number": 172,
      "level": "Easy",
      "description": "Given an integer n, return the number of trailing zeroes in n!",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Excel Sheet Column Number",
      "number": 171,
      "level": "Easy",
      "description": "Related to question Excel Sheet Column Title\r\nGiven a column title as appear in an Excel sheet, return its corresponding column number",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Two Sum III - Data structure design",
      "number": 170,
      "level": "Easy",
      "description": "Design and implement a TwoSum class",
      "tags": [
        "Hash Table",
        "Design"
      ]
    },
    {
      "title": "Majority Element",
      "number": 169,
      "level": "Easy",
      "description": "Given an array of size n, find the majority element",
      "tags": [
        "Divide and Conquer",
        "Array",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Excel Sheet Column Title",
      "number": 168,
      "level": "Easy",
      "description": "Given a positive integer, return its corresponding column title as appear in an Excel sheet",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "Two Sum II - Input array is sorted",
      "number": 167,
      "level": "Medium",
      "description": "Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number",
      "tags": [
        "Array",
        "Two Pointers",
        "Binary Search"
      ]
    },
    {
      "title": "Fraction to Recurring Decimal",
      "number": 166,
      "level": "Medium",
      "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format",
      "tags": [
        "Hash Table",
        "Math"
      ]
    },
    {
      "title": "Compare Version Numbers",
      "number": 165,
      "level": "Easy",
      "description": "Compare two version numbers version1 and version2",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Maximum Gap",
      "number": 164,
      "level": "Hard",
      "description": "Given an unsorted array, find the maximum difference between the successive elements in its sorted form",
      "tags": [
        "Sort"
      ]
    },
    {
      "title": "Missing Ranges",
      "number": 163,
      "level": "Medium",
      "description": "Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Find Peak Element",
      "number": 162,
      "level": "Medium",
      "description": "A peak element is an element that is greater than its neighbors",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "One Edit Distance",
      "number": 161,
      "level": "Medium",
      "description": "Given two strings S and T, determine if they are both one edit distance apart",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Intersection of Two Linked Lists",
      "number": 160,
      "level": "Easy",
      "description": "Write a program to find the node at which the intersection of two singly linked lists begins",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Longest Substring with At Most Two Distinct Characters",
      "number": 159,
      "level": "Hard",
      "description": "Given a string, find the length of the longest substring T that contains at most 2 distinct characters",
      "tags": [
        "Hash Table",
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Read N Characters Given Read4 II - Call multiple times",
      "number": 158,
      "level": "Hard",
      "description": "The API: int read4(char *buf) reads 4 characters at a time from a file",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Read N Characters Given Read4",
      "number": 157,
      "level": "Easy",
      "description": "The API: int read4(char *buf) reads 4 characters at a time from a file",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Binary Tree Upside Down",
      "number": 156,
      "level": "Medium",
      "description": "Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and",
      "tags": [
        "Tree"
      ]
    },
    {
      "title": "Min Stack",
      "number": 155,
      "level": "Easy",
      "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time",
      "tags": [
        "Stack",
        "Design"
      ]
    },
    {
      "title": "Find Minimum in Rotated Sorted Array II",
      "number": 154,
      "level": "Hard",
      "description": "Follow up for \"Find Minimum in Rotated Sorted Array\": What if duplicates are allowed? Would this affect the run-time complexity? How and why? Suppose a sorted array is rotated at some pivot",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Find Minimum in Rotated Sorted Array",
      "number": 153,
      "level": "Medium",
      "description": "Suppose a sorted array is rotated at some pivot unknown to you beforehand",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Maximum Product Subarray",
      "number": 152,
      "level": "Medium",
      "description": "Find the contiguous subarray within an array (containing at least one number) which has the largest product",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Reverse Words in a String",
      "number": 151,
      "level": "Medium",
      "description": "Given an input string, reverse the string word by word",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Evaluate Reverse Polish Notation",
      "number": 150,
      "level": "Medium",
      "description": "Evaluate the value of an arithmetic expression in Reverse Polish Notation",
      "tags": [
        "Stack"
      ]
    },
    {
      "title": "Max Points on a Line",
      "number": 149,
      "level": "Hard",
      "description": "Given n points on a 2D plane, find the maximum number of points that lie on the same straight line",
      "tags": [
        "Hash Table",
        "Math"
      ]
    },
    {
      "title": "Sort List",
      "number": 148,
      "level": "Medium",
      "description": "Sort a linked list in O(n log n) time using constant space complexity",
      "tags": [
        "Linked List",
        "Sort"
      ]
    },
    {
      "title": "Insertion Sort List",
      "number": 147,
      "level": "Medium",
      "description": "Sort a linked list using insertion sort",
      "tags": [
        "Linked List",
        "Sort"
      ]
    },
    {
      "title": "LRU Cache",
      "number": 146,
      "level": "Hard",
      "description": "Design and implement a data structure for Least Recently Used (LRU) cache",
      "tags": [
        "Design"
      ]
    },
    {
      "title": "Binary Tree Postorder Traversal",
      "number": 145,
      "level": "Hard",
      "description": "Given a binary tree, return the postorder traversal of its nodes' values",
      "tags": [
        "Tree",
        "Stack"
      ]
    },
    {
      "title": "Binary Tree Preorder Traversal",
      "number": 144,
      "level": "Medium",
      "description": "Given a binary tree, return the preorder traversal of its nodes' values",
      "tags": [
        "Tree",
        "Stack"
      ]
    },
    {
      "title": "Reorder List",
      "number": 143,
      "level": "Medium",
      "description": "Given a singly linked list L: L0→L1→…→Ln-1→Ln, reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→… You must do this in-place without altering the nodes' values. For example, Given {1,2,3,4}, reorder it to {1,4,2,3}. Show Tags Linked",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Linked List Cycle II",
      "number": 142,
      "level": "Medium",
      "description": "Given a linked list, return the node where the cycle begins",
      "tags": [
        "Linked List",
        "Two Pointers"
      ]
    },
    {
      "title": "Linked List Cycle",
      "number": 141,
      "level": "Medium",
      "description": "Given a linked list, determine if it has a cycle in it",
      "tags": [
        "Linked List",
        "Two Pointers"
      ]
    },
    {
      "title": "Word Break II",
      "number": 140,
      "level": "Hard",
      "description": "Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word",
      "tags": [
        "Dynamic Programming",
        "Backtracking"
      ]
    },
    {
      "title": "Word Break",
      "number": 139,
      "level": "Medium",
      "description": "Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words",
      "tags": []
    },
    {
      "title": "Copy List with Random Pointer",
      "number": 138,
      "level": "Hard",
      "description": "A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null",
      "tags": [
        "Hash Table",
        "Linked List"
      ]
    },
    {
      "title": "Single Number II",
      "number": 137,
      "level": "Medium",
      "description": "Given an array of integers, every element appears three times except for one",
      "tags": [
        "Bit Manipulation"
      ]
    },
    {
      "title": "Single Number",
      "number": 136,
      "level": "Medium",
      "description": "Given an array of integers, every element appears twice except for one",
      "tags": [
        "Hash Table",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Candy",
      "number": 135,
      "level": "Hard",
      "description": "There are N children standing in a line",
      "tags": [
        "Greedy"
      ]
    },
    {
      "title": "Gas Station",
      "number": 134,
      "level": "Medium",
      "description": "There are N gas stations along a circular route, where the amount of gas at station i is gas[i]",
      "tags": [
        "Greedy"
      ]
    },
    {
      "title": "Clone Graph",
      "number": 133,
      "level": "Medium",
      "description": "Clone an undirected graph",
      "tags": [
        "Depth-first Search",
        "Breadth-first Search",
        "Graph"
      ]
    },
    {
      "title": "Palindrome Partitioning II",
      "number": 132,
      "level": "Hard",
      "description": "Given a string s, partition s such that every substring of the partition is a palindrome",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Palindrome Partitioning",
      "number": 131,
      "level": "Medium",
      "description": "Given a string s, partition s such that every substring of the partition is a palindrome",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Surrounded Regions",
      "number": 130,
      "level": "Medium",
      "description": "Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'",
      "tags": [
        "Breadth-first Search",
        "Union Find"
      ]
    },
    {
      "title": "Sum Root to Leaf Numbers",
      "number": 129,
      "level": "Medium",
      "description": "Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Longest Consecutive Sequence",
      "number": 128,
      "level": "Hard",
      "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence",
      "tags": [
        "Array",
        "Union Find"
      ]
    },
    {
      "title": "Word Ladder",
      "number": 127,
      "level": "Medium",
      "description": "Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that: Only one letter can be changed at a",
      "tags": []
    },
    {
      "title": "Word Ladder II",
      "number": 126,
      "level": "Hard",
      "description": "Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that: Only one letter can be changed at a time Each",
      "tags": [
        "Array",
        "Backtracking",
        "Breadth-first Search",
        "String"
      ]
    },
    {
      "title": "Valid Palindrome",
      "number": 125,
      "level": "Easy",
      "description": "Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases",
      "tags": [
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Binary Tree Maximum Path Sum",
      "number": 124,
      "level": "Hard",
      "description": "Given a binary tree, find the maximum path sum",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Best Time to Buy and Sell Stock III",
      "number": 123,
      "level": "Hard",
      "description": "Say you have an array for which the ith element is the price of a given stock on day i",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Best Time to Buy and Sell Stock II",
      "number": 122,
      "level": "Medium",
      "description": "Say you have an array for which the ith element is the price of a given stock on day i",
      "tags": [
        "Array",
        "Greedy"
      ]
    },
    {
      "title": "Best Time to Buy and Sell Stock",
      "number": 121,
      "level": "Medium",
      "description": "Say you have an array for which the ith element is the price of a given stock on day i",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Triangle",
      "number": 120,
      "level": "Medium",
      "description": "Given a triangle, find the minimum path sum from top to bottom",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Pascal's Triangle II",
      "number": 119,
      "level": "Easy",
      "description": "Given an index k, return the kth row of the Pascal's triangle",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Pascal's Triangle",
      "number": 118,
      "level": "Easy",
      "description": "Given numRows, generate the first numRows of Pascal's triangle",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Populating Next Right Pointers in Each Node II",
      "number": 117,
      "level": "Hard",
      "description": "Follow up for problem \"Populating Next Right Pointers in Each Node\"",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Populating Next Right Pointers in Each Node",
      "number": 116,
      "level": "Medium",
      "description": "Given a binary tree struct TreeLinkNode { TreeLinkNode *left; TreeLinkNode *right; TreeLinkNode *next; } Populate each next pointer to point to its next right node. If there is no next right node,",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Distinct Subsequences",
      "number": 115,
      "level": "Hard",
      "description": "Given a string S and a string T, count the number of distinct subsequences of T in S",
      "tags": [
        "Dynamic Programming",
        "String"
      ]
    },
    {
      "title": "Flatten Binary Tree to Linked List",
      "number": 114,
      "level": "Medium",
      "description": "Given a binary tree, flatten it to a linked list in-place",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Path Sum II",
      "number": 113,
      "level": "Medium",
      "description": "Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Path Sum",
      "number": 112,
      "level": "Easy",
      "description": "Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Minimum Depth of Binary Tree",
      "number": 111,
      "level": "Easy",
      "description": "Given a binary tree, find its minimum depth",
      "tags": [
        "Tree",
        "Depth-first Search",
        "Breadth-first Search"
      ]
    },
    {
      "title": "Balanced Binary Tree",
      "number": 110,
      "level": "Easy",
      "description": "Given a binary tree, determine if it is height-balanced",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Convert Sorted List to Binary Search Tree",
      "number": 109,
      "level": "Medium",
      "description": "Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST",
      "tags": [
        "Depth-first Search",
        "Linked List"
      ]
    },
    {
      "title": "Convert Sorted Array to Binary Search Tree",
      "number": 108,
      "level": "Medium",
      "description": "Given an array where elements are sorted in ascending order, convert it to a height balanced BST",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Binary Tree Level Order Traversal II",
      "number": 107,
      "level": "Easy",
      "description": "Given a binary tree, return the bottom-up level order traversal of its nodes' values",
      "tags": [
        "Tree",
        "Breadth-first Search"
      ]
    },
    {
      "title": "Construct Binary Tree from Inorder and Postorder Traversal",
      "number": 106,
      "level": "Medium",
      "description": "Given inorder and postorder traversal of a tree, construct the binary tree",
      "tags": [
        "Tree",
        "Array",
        "Depth-first Search"
      ]
    },
    {
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "number": 105,
      "level": "Medium",
      "description": "Given preorder and inorder traversal of a tree, construct the binary tree",
      "tags": [
        "Tree",
        "Array",
        "Depth-first Search"
      ]
    },
    {
      "title": "Maximum Depth of Binary Tree",
      "number": 104,
      "level": "Easy",
      "description": "Given a binary tree, find its maximum depth",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Binary Tree Zigzag Level Order Traversal",
      "number": 103,
      "level": "Medium",
      "description": "Given a binary tree, return the zigzag level order traversal of its nodes' values",
      "tags": [
        "Tree",
        "Breadth-first Search",
        "Stack"
      ]
    },
    {
      "title": "Binary Tree Level Order Traversal",
      "number": 102,
      "level": "Easy",
      "description": "Given a binary tree, return the level order traversal of its nodes' values",
      "tags": [
        "Tree",
        "Breadth-first Search"
      ]
    },
    {
      "title": "Symmetric Tree",
      "number": 101,
      "level": "Easy",
      "description": "Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center)",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Same Tree",
      "number": 100,
      "level": "Easy",
      "description": "Given two binary trees, write a function to check if they are equal or not",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Recover Binary Search Tree",
      "number": 99,
      "level": "Hard",
      "description": "Two elements of a binary search tree (BST) are swapped by mistake",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Validate Binary Search Tree",
      "number": 98,
      "level": "Medium",
      "description": "Given a binary tree, determine if it is a valid binary search tree (BST)",
      "tags": [
        "Tree",
        "Depth-first Search"
      ]
    },
    {
      "title": "Interleaving String",
      "number": 97,
      "level": "Hard",
      "description": "Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2",
      "tags": [
        "Dynamic Programming",
        "String"
      ]
    },
    {
      "title": "Unique Binary Search Trees",
      "number": 96,
      "level": "Medium",
      "description": "Given n, how many structurally unique BST's (binary search trees) that store values 1",
      "tags": [
        "Tree",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Unique Binary Search Trees II",
      "number": 95,
      "level": "Medium",
      "description": "Given n, generate all structurally unique BST's (binary search trees) that store values 1",
      "tags": [
        "Tree",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Binary Tree Inorder Traversal",
      "number": 94,
      "level": "Medium",
      "description": "Given a binary tree, return the inorder traversal of its nodes' values",
      "tags": [
        "Tree",
        "Hash Table",
        "Stack"
      ]
    },
    {
      "title": "Restore IP Addresses",
      "number": 93,
      "level": "Medium",
      "description": "Given a string containing only digits, restore it by returning all possible valid IP address combinations",
      "tags": [
        "Backtracking",
        "String"
      ]
    },
    {
      "title": "Reverse Linked List II",
      "number": 92,
      "level": "Medium",
      "description": "Reverse a linked list from position m to n",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Decode Ways",
      "number": 91,
      "level": "Medium",
      "description": "A message containing letters from A-Z is being encoded to numbers using the following mapping:\r\n\r\n\r\n\r\n'A' -> 1\r\n'B' -> 2\r\n",
      "tags": [
        "Dynamic Programming",
        "String"
      ]
    },
    {
      "title": "Subsets II",
      "number": 90,
      "level": "Medium",
      "description": "Given a collection of integers that might contain duplicates, nums, return all possible subsets",
      "tags": [
        "Array",
        "Backtracking"
      ]
    },
    {
      "title": "Gray Code",
      "number": 89,
      "level": "Medium",
      "description": "The gray code is a binary numeral system where two successive values differ in only one bit",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Merge Sorted Array",
      "number": 88,
      "level": "Easy",
      "description": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Scramble String",
      "number": 87,
      "level": "Hard",
      "description": "Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively",
      "tags": [
        "Dynamic Programming",
        "String"
      ]
    },
    {
      "title": "Partition List",
      "number": 86,
      "level": "Medium",
      "description": "Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x",
      "tags": [
        "Linked List",
        "Two Pointers"
      ]
    },
    {
      "title": "Maximal Rectangle",
      "number": 85,
      "level": "Hard",
      "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area",
      "tags": [
        "Array",
        "Hash Table",
        "Stack",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Largest Rectangle in Histogram",
      "number": 84,
      "level": "Hard",
      "description": "Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram. Above is a histogram where width",
      "tags": [
        "Array",
        "Stack"
      ]
    },
    {
      "title": "Remove Duplicates from Sorted List",
      "number": 83,
      "level": "Easy",
      "description": "Given a sorted linked list, delete all duplicates such that each element appear only once",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Remove Duplicates from Sorted List II",
      "number": 82,
      "level": "Medium",
      "description": "Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Search in Rotated Sorted Array II",
      "number": 81,
      "level": "Medium",
      "description": "Follow up for \"Search in Rotated Sorted Array\": What if duplicates are allowed? Would this affect the run-time complexity? How and why? Write a function to determine if a given target is",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Remove Duplicates from Sorted Array II",
      "number": 80,
      "level": "Medium",
      "description": "Follow up for \"Remove Duplicates\": What if duplicates are allowed at most twice? For example, Given sorted array nums = [1,1,1,2,2,3], Your function should return length = 5, with the first five",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Word Search",
      "number": 79,
      "level": "Medium",
      "description": "Given a 2D board and a word, find if the word exists in the grid",
      "tags": [
        "Array",
        "Backtracking"
      ]
    },
    {
      "title": "Subsets",
      "number": 78,
      "level": "Medium",
      "description": "Given a set of distinct integers, nums, return all possible subsets",
      "tags": [
        "Array",
        "Backtracking",
        "Bit Manipulation"
      ]
    },
    {
      "title": "Combinations",
      "number": 77,
      "level": "Medium",
      "description": "Given two integers n and k, return all possible combinations of k numbers out of 1 ",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Minimum Window Substring",
      "number": 76,
      "level": "Hard",
      "description": "Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n)",
      "tags": [
        "Hash Table",
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Sort Colors",
      "number": 75,
      "level": "Medium",
      "description": "Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.",
      "tags": [
        "Array",
        "Two Pointers",
        "Sort"
      ]
    },
    {
      "title": "Search a 2D Matrix",
      "number": 74,
      "level": "Medium",
      "description": "Write an efficient algorithm that searches for a value in an m x n matrix",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Set Matrix Zeroes",
      "number": 73,
      "level": "Medium",
      "description": "Given a m x n matrix, if an element is 0, set its entire row and column to 0",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Edit Distance",
      "number": 72,
      "level": "Hard",
      "description": "Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2",
      "tags": [
        "Dynamic Programming",
        "String"
      ]
    },
    {
      "title": "Simplify Path",
      "number": 71,
      "level": "Medium",
      "description": "Given an absolute path for a file (Unix-style), simplify it",
      "tags": [
        "Stack",
        "String"
      ]
    },
    {
      "title": "Climbing Stairs",
      "number": 70,
      "level": "Easy",
      "description": "You are climbing a stair case",
      "tags": [
        "Dynamic Programming"
      ]
    },
    {
      "title": "Sqrt(x)",
      "number": 69,
      "level": "Medium",
      "description": "Implement int sqrt(int x)",
      "tags": [
        "Math",
        "Binary Search"
      ]
    },
    {
      "title": "Text Justification",
      "number": 68,
      "level": "Hard",
      "description": "Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Add Binary",
      "number": 67,
      "level": "Easy",
      "description": "Given two binary strings, return their sum (also a binary string)",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Plus One",
      "number": 66,
      "level": "Easy",
      "description": "Given a non-negative number represented as an array of digits, plus one to the number",
      "tags": [
        "Array",
        "Math"
      ]
    },
    {
      "title": "Valid Number",
      "number": 65,
      "level": "Hard",
      "description": "Validate if a given string is numeric",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Minimum Path Sum",
      "number": 64,
      "level": "Medium",
      "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Unique Paths II",
      "number": 63,
      "level": "Medium",
      "description": "Follow up for \"Unique Paths\":\r\n\r\nNow consider if some obstacles are added to the grids",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Unique Paths",
      "number": 62,
      "level": "Medium",
      "description": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below)",
      "tags": [
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "Rotate List",
      "number": 61,
      "level": "Medium",
      "description": "Given a list, rotate the list to the right by k places, where k is non-negative",
      "tags": [
        "Linked List",
        "Two Pointers"
      ]
    },
    {
      "title": "Permutation Sequence",
      "number": 60,
      "level": "Medium",
      "description": "The set [1,2,3,…,n] contains a total of n! unique permutations",
      "tags": [
        "Backtracking",
        "Math"
      ]
    },
    {
      "title": "Spiral Matrix II",
      "number": 59,
      "level": "Medium",
      "description": "Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Length of Last Word",
      "number": 58,
      "level": "Easy",
      "description": "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Insert Interval",
      "number": 57,
      "level": "Hard",
      "description": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary)",
      "tags": [
        "Array",
        "Sort"
      ]
    },
    {
      "title": "Merge Intervals",
      "number": 56,
      "level": "Hard",
      "description": "Given a collection of intervals, merge all overlapping intervals",
      "tags": [
        "Array",
        "Sort"
      ]
    },
    {
      "title": "Jump Game",
      "number": 55,
      "level": "Medium",
      "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array",
      "tags": [
        "Array",
        "Greedy"
      ]
    },
    {
      "title": "Spiral Matrix",
      "number": 54,
      "level": "Medium",
      "description": "Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Maximum Subarray",
      "number": 53,
      "level": "Medium",
      "description": "Find the contiguous subarray within an array (containing at least one number) which has the largest sum",
      "tags": [
        "Divide and Conquer",
        "Array",
        "Dynamic Programming"
      ]
    },
    {
      "title": "N-Queens II",
      "number": 52,
      "level": "Hard",
      "description": "Follow up for N-Queens problem",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "N-Queens",
      "number": 51,
      "level": "Hard",
      "description": "The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Pow(x, n)",
      "number": 50,
      "level": "Medium",
      "description": "Implement pow(x, n)",
      "tags": [
        "Math",
        "Binary Search"
      ]
    },
    {
      "title": "Group Anagrams",
      "number": 49,
      "level": "Medium",
      "description": "Given an array of strings, group anagrams together",
      "tags": [
        "Hash Table",
        "String"
      ]
    },
    {
      "title": "Rotate Image",
      "number": 48,
      "level": "Medium",
      "description": "You are given an n x n 2D matrix representing an image",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Permutations II",
      "number": 47,
      "level": "Medium",
      "description": "Given a collection of numbers that might contain duplicates, return all possible unique permutations",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Permutations",
      "number": 46,
      "level": "Medium",
      "description": "Given a collection of distinct numbers, return all possible permutations",
      "tags": [
        "Backtracking"
      ]
    },
    {
      "title": "Jump Game II",
      "number": 45,
      "level": "Hard",
      "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array",
      "tags": [
        "Array",
        "Greedy"
      ]
    },
    {
      "title": "Wildcard Matching",
      "number": 44,
      "level": "Hard",
      "description": "Implement wildcard pattern matching with support for '?' and '*'",
      "tags": [
        "Dynamic Programming",
        "Backtracking",
        "Greedy",
        "String"
      ]
    },
    {
      "title": "Multiply Strings",
      "number": 43,
      "level": "Medium",
      "description": "Given two numbers represented as strings, return multiplication of the numbers as a string",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Trapping Rain Water",
      "number": 42,
      "level": "Hard",
      "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining",
      "tags": [
        "Array",
        "Stack",
        "Two Pointers"
      ]
    },
    {
      "title": "First Missing Positive",
      "number": 41,
      "level": "Hard",
      "description": "Given an unsorted integer array, find the first missing positive integer",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Combination Sum II",
      "number": 40,
      "level": "Medium",
      "description": "Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T",
      "tags": [
        "Array",
        "Backtracking"
      ]
    },
    {
      "title": "Combination Sum",
      "number": 39,
      "level": "Medium",
      "description": "Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T",
      "tags": [
        "Array",
        "Backtracking"
      ]
    },
    {
      "title": "Count and Say",
      "number": 38,
      "level": "Easy",
      "description": "The count-and-say sequence is the sequence of integers beginning as follows:\r\n1, 11, 21, 1211, 111221, ",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Sudoku Solver",
      "number": 37,
      "level": "Hard",
      "description": "Write a program to solve a Sudoku puzzle by filling the empty cells",
      "tags": [
        "Backtracking",
        "Hash Table"
      ]
    },
    {
      "title": "Valid Sudoku",
      "number": 36,
      "level": "Easy",
      "description": "Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules",
      "tags": [
        "Hash Table"
      ]
    },
    {
      "title": "Search Insert Position",
      "number": 35,
      "level": "Medium",
      "description": "Given a sorted array and a target value, return the index if the target is found",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Search for a Range",
      "number": 34,
      "level": "Medium",
      "description": "Given a sorted array of integers, find the starting and ending position of a given target value",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Search in Rotated Sorted Array",
      "number": 33,
      "level": "Hard",
      "description": "Suppose a sorted array is rotated at some pivot unknown to you beforehand",
      "tags": [
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Longest Valid Parentheses",
      "number": 32,
      "level": "Hard",
      "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring",
      "tags": [
        "Dynamic Programming",
        "String"
      ]
    },
    {
      "title": "Next Permutation",
      "number": 31,
      "level": "Medium",
      "description": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers",
      "tags": [
        "Array"
      ]
    },
    {
      "title": "Substring with Concatenation of All Words",
      "number": 30,
      "level": "Hard",
      "description": "You are given a string, s, and a list of words, words, that are all of the same length",
      "tags": [
        "Hash Table",
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Divide Two Integers",
      "number": 29,
      "level": "Medium",
      "description": "Divide two integers without using multiplication, division and mod operator",
      "tags": [
        "Math",
        "Binary Search"
      ]
    },
    {
      "title": "Implement strStr()",
      "number": 28,
      "level": "Easy",
      "description": "Implement strStr()",
      "tags": [
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Remove Element",
      "number": 27,
      "level": "Easy",
      "description": "Given an array and a value, remove all instances of that value in place and return the new length",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Remove Duplicates from Sorted Array",
      "number": 26,
      "level": "Easy",
      "description": "Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Reverse Nodes in k-Group",
      "number": 25,
      "level": "Hard",
      "description": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Swap Nodes in Pairs",
      "number": 24,
      "level": "Medium",
      "description": "Given a linked list, swap every two adjacent nodes and return its head",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Merge k Sorted Lists",
      "number": 23,
      "level": "Hard",
      "description": "Merge k sorted linked lists and return it as one sorted list",
      "tags": [
        "Divide and Conquer",
        "Linked List",
        "Heap"
      ]
    },
    {
      "title": "Generate Parentheses",
      "number": 22,
      "level": "Medium",
      "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses",
      "tags": [
        "Backtracking",
        "String"
      ]
    },
    {
      "title": "Merge Two Sorted Lists",
      "number": 21,
      "level": "Easy",
      "description": "Merge two sorted linked lists and return it as a new list",
      "tags": [
        "Linked List"
      ]
    },
    {
      "title": "Valid Parentheses",
      "number": 20,
      "level": "Easy",
      "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid",
      "tags": [
        "Stack",
        "String"
      ]
    },
    {
      "title": "Remove Nth Node From End of List",
      "number": 19,
      "level": "Easy",
      "description": "Given a linked list, remove the nth node from the end of list and return its head",
      "tags": [
        "Linked List",
        "Two Pointers"
      ]
    },
    {
      "title": "4Sum",
      "number": 18,
      "level": "Medium",
      "description": "Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets",
      "tags": [
        "Array",
        "Hash Table",
        "Two Pointers"
      ]
    },
    {
      "title": "Letter Combinations of a Phone Number",
      "number": 17,
      "level": "Medium",
      "description": "Given a digit string, return all possible letter combinations that the number could represent",
      "tags": [
        "Backtracking",
        "String"
      ]
    },
    {
      "title": "3Sum Closest",
      "number": 16,
      "level": "Medium",
      "description": "Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "3Sum",
      "number": 15,
      "level": "Medium",
      "description": "Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Longest Common Prefix",
      "number": 14,
      "level": "Easy",
      "description": "Write a function to find the longest common prefix string amongst an array of strings",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Roman to Integer",
      "number": 13,
      "level": "Easy",
      "description": "Given a roman numeral, convert it to an integer",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Integer to Roman",
      "number": 12,
      "level": "Medium",
      "description": "Given an integer, convert it to a roman numeral",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Container With Most Water",
      "number": 11,
      "level": "Medium",
      "description": "Given n non-negative integers a1, a2, ",
      "tags": [
        "Array",
        "Two Pointers"
      ]
    },
    {
      "title": "Regular Expression Matching",
      "number": 10,
      "level": "Hard",
      "description": "Implement regular expression matching with support for '",
      "tags": [
        "Dynamic Programming",
        "Backtracking",
        "String"
      ]
    },
    {
      "title": "Palindrome Number",
      "number": 9,
      "level": "Easy",
      "description": "Determine whether an integer is a palindrome",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "String to Integer (atoi)",
      "number": 8,
      "level": "Easy",
      "description": "Implement atoi to convert a string to an integer",
      "tags": [
        "Math",
        "String"
      ]
    },
    {
      "title": "Reverse Integer",
      "number": 7,
      "level": "Easy",
      "description": "Reverse digits of an integer",
      "tags": [
        "Math"
      ]
    },
    {
      "title": "ZigZag Conversion",
      "number": 6,
      "level": "Easy",
      "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Longest Palindromic Substring",
      "number": 5,
      "level": "Medium",
      "description": "Given a string S, find the longest palindromic substring in S",
      "tags": [
        "String"
      ]
    },
    {
      "title": "Median of Two Sorted Arrays",
      "number": 4,
      "level": "Hard",
      "description": "There are two sorted arrays nums1 and nums2 of size m and n respectively",
      "tags": [
        "Divide and Conquer",
        "Array",
        "Binary Search"
      ]
    },
    {
      "title": "Longest Substring Without Repeating Characters",
      "number": 3,
      "level": "Medium",
      "description": "Given a string, find the length of the longest substring without repeating characters",
      "tags": [
        "Hash Table",
        "Two Pointers",
        "String"
      ]
    },
    {
      "title": "Add Two Numbers",
      "number": 2,
      "level": "Medium",
      "description": "You are given two linked lists representing two non-negative numbers",
      "tags": [
        "Linked List",
        "Math"
      ]
    },
    {
      "title": "Two Sum",
      "number": 1,
      "level": "Medium",
      "description": "Given an array of integers, find two numbers such that they add up to a specific target number",
      "tags": [
        "Array",
        "Hash Table"
      ]
    }
  ]
}
